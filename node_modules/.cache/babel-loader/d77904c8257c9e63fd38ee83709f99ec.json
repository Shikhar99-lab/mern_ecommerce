{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { isAutheticated } from \"../auth/helper\";\nimport Base from \"../core/Base\";\nimport { getCategories } from \"./helper/adminapicall\";\n\nconst manageCategory = require(\"../models/category\");\n\nexports.getCategoryById = (req, res, next, id) => {\n  Category.findById(id).exec((err, cate) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Category not found in DB\"\n      });\n    }\n\n    req.category = cate;\n    next();\n  });\n};\n\nexports.createCategory = (req, res) => {\n  const category = new Category(req.body);\n  category.save((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"NOT able to save category in DB\"\n      });\n    }\n\n    res.json({\n      category\n    });\n  });\n};\n\nexports.getCategory = (req, res) => {\n  return res.json(req.category);\n};\n\nexports.getAllCategory = (req, res) => {\n  Category.find().exec((err, categories) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"NO categories found\"\n      });\n    }\n\n    res.json(categories);\n  });\n};\n\nexports.updateCategory = (req, res) => {\n  const category = req.category;\n  category.name = req.body.name;\n  category.save((err, updatedCategory) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Failed to update category\"\n      });\n    }\n\n    res.json(updatedCategory);\n  });\n};\n\nexports.removeCategory = (req, res) => {\n  const category = req.category;\n  category.remove((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Failed to delete this category\"\n      });\n    }\n\n    res.json({\n      message: \"Successfull deleted\"\n    });\n  });\n};\n\nexport default ManageCategories;","map":{"version":3,"sources":["/Users/shikhar99/Desktop/MERN/projfrontend/src/admin/ManageCategories.js"],"names":["React","useState","useEffect","Link","isAutheticated","Base","getCategories","manageCategory","require","exports","getCategoryById","req","res","next","id","Category","findById","exec","err","cate","status","json","error","category","createCategory","body","save","getCategory","getAllCategory","find","categories","updateCategory","name","updatedCategory","removeCategory","remove","message","ManageCategories"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { isAutheticated } from \"../auth/helper\";\nimport Base from \"../core/Base\";\nimport { getCategories } from \"./helper/adminapicall\";\n\nconst manageCategory = require(\"../models/category\");\n\nexports.getCategoryById = (req, res, next, id) => {\n  Category.findById(id).exec((err, cate) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Category not found in DB\"\n      });\n    }\n    req.category = cate;\n    next();\n  });\n};\n\nexports.createCategory = (req, res) => {\n  const category = new Category(req.body);\n  category.save((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"NOT able to save category in DB\"\n      });\n    }\n    res.json({ category });\n  });\n};\n\nexports.getCategory = (req, res) => {\n  return res.json(req.category);\n};\n\nexports.getAllCategory = (req, res) => {\n  Category.find().exec((err, categories) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"NO categories found\"\n      });\n    }\n    res.json(categories);\n  });\n};\n\nexports.updateCategory = (req, res) => {\n  const category = req.category;\n  category.name = req.body.name;\n\n  category.save((err, updatedCategory) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Failed to update category\"\n      });\n    }\n    res.json(updatedCategory);\n  });\n};\n\nexports.removeCategory = (req, res) => {\n  const category = req.category;\n\n  category.remove((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Failed to delete this category\"\n      });\n    }\n    res.json({\n      message: \"Successfull deleted\"\n    });\n  });\n};\n\n\nexport default ManageCategories;\n"]},"metadata":{},"sourceType":"module"}